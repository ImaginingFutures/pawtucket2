cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("object"),
 		labelPlural = _("objects"),
		table = ca_objects,
		
		restrictToTypes = [film_print],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<l><b>^ca_objects.preferred_labels</b><br/><ifcount code='ca_occurrences' min='1'><unit relativeTo='ca_occurrences' delimiter=', '><ifdef code='ca_occurrences.nonpreferred_labels.name'>(ca_occurrences.nonpreferred_labels.name%delimiter=,_)<br/></ifdef><ifcount code='ca_entities' min='1'><unit relativeTo='ca_entities' delimiter=', '>^ca_entities.preferred_labels.displayname</unit>, </ifcount><ifdef code='ca_occurrences.country'>^ca_occurrences.country, </ifdef><ifdef code='ca_occurrences.production_year'>^ca_occurrences.production_year, </ifdef><ifdef code='ca_occurrences.language'>^ca_occurrences.language</ifdef><ifdef code='ca_entities.preferred_labels.displayname|ca_occurrences.production_year|ca_occurrences.country|ca_occurrences.language'><br/></ifdef></unit></ifcount><ifdef code='ca_objects.format'>^ca_objects.format, </ifdef><ifdef code='ca_objects.version'>^ca_objects.version</ifdef></l>",
			},
			list = {
				result_caption = "<l><b>^ca_objects.preferred_labels</b><br/><ifcount code='ca_occurrences' min='1'><unit relativeTo='ca_occurrences' delimiter=', '><ifdef code='ca_occurrences.nonpreferred_labels.name'>(ca_occurrences.nonpreferred_labels.name%delimiter=,_)<br/></ifdef><ifcount code='ca_entities' min='1'><unit relativeTo='ca_entities' delimiter=', '>^ca_entities.preferred_labels.displayname</unit>, </ifcount><ifdef code='ca_occurrences.country'>^ca_occurrences.country, </ifdef><ifdef code='ca_occurrences.production_year'>^ca_occurrences.production_year, </ifdef><ifdef code='ca_occurrences.language'>^ca_occurrences.language</ifdef><ifdef code='ca_entities.preferred_labels.displayname|ca_occurrences.production_year|ca_occurrences.country|ca_occurrences.language'><br/></ifdef></unit></ifcount><ifdef code='ca_objects.format'>^ca_objects.format, </ifdef><ifdef code='ca_objects.version'>^ca_objects.version</ifdef></l>",
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType],
#			extendedInformationTemplate = ^ca_objects.description
#		}
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {
				result_caption = "<small><l>^ca_collections.idno</l></small><br/><l>^ca_collections.preferred_labels</l>",
			}, 
			list = {
				result_caption = "<small><l>^ca_collections.idno</l></small><br/><l>^ca_collections.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(People/Orgs),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}, 
			list = {
				result_caption = "<small><l>^ca_entities.idno</l></small><br/><l>^ca_entities.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	},
	occurrences = {
		displayName = _(Works),
		labelSingular = _("work"),
 		labelPlural = _("works"),
		table = ca_occurrences,
		restrictToTypes = [],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {
				result_caption = "<small><l>^ca_occurrences.idno</l></small><br/><l>^ca_occurrences.preferred_labels</l>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_occurrences.idno,
			Name = ca_occurrence_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
#		options = {
#			selectMediaUsingRelationshipTypes = [relationshipType],
#			selectMediaUsingTypes = [objectType]
#		}
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_objects = {
	name = _(Objects),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,
			table = ca_entities,
			relative_to = ca_occurrences,

			relationship_table = ca_entities_x_occurrences,
			group_mode = none,
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],

			indefinite_article = an,
			label_singular = _(director),
			label_plural = _(directors)
		},
		country_facet = {
			type = attribute,
			element_code = country,
			group_mode = alphabetical,
			relative_to = ca_occurrences,

			indefinite_article = a,
			label_singular = _(country),
			label_plural = _(countries)
		},
		year_facet = {
			type = normalizedDates,
			element_code = production_year,
			normalization = years,
			group_mode = none,

			relative_to = ca_occurrences,

			label_singular = _("year"),
			label_plural = _("years"),
			requires = decade_facet
        },
		decade_facet = {
			type = normalizedDates,
			element_code = production_year,
			normalization = decades,
			group_mode = none,

			relative_to = ca_occurrences,

			label_singular = _("decade"),
			label_plural = _("decades")
        },
        forum_year_facet = {
			type = attribute,
			element_code = forum_year,
			relative_to = ca_occurrences,

			group_mode = none,

			label_singular = _(forum year),
			label_plural = _(forum years),
			requires = forum_decade_facet
		},
        forum_decade_facet = {
			type = attribute,
			element_code = forum_year,
			relative_to = ca_occurrences,

			group_mode = none,

			label_singular = _(forum decade),
			label_plural = _(forum decades)
		},
		format_facet = {
			type = attribute,
			element_code = format,
			normalization = years,

			group_mode = none,

			label_singular = _(format),
			label_plural = _(formats)
		},
		titleseries_facet = {
			type = attribute,
			element_code = title_series,

			relative_to = ca_occurrences,

			group_mode = none,

			label_singular = _(Series title),
			label_plural = _(Series titles)
		},
	}
}