cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("work"),
 		labelPlural = _("works"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			timeline = {
				data = ca_objects.dateSet.indexingDate,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					credit_template = ^ca_objects.rightsStatement.rightsStatement_text,
					caption_template = <em>^ca_objects.caption</em>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_objects = {
	name = _("Works"),
	show_all_for_no_crieria_browse = 1,
	facets = {
	    has_media_facet = {
                type = has,

                table = ca_object_representations,
                relationship_table = ca_objects_x_object_representations,
                restrict_to_types = [],
                restrict_to_relationship_types = [],

                #single_value = 1,
                group_mode = none,

                label_yes = _("Has media"),
                label_no = _("Has no media"),

                label_singular = _("has media"),
                label_plural = _("has media")
        },
		individual_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = authority,		
                table = ca_entities,
                relationship_table = ca_objects_x_entities,
                restrict_to_types = [],
                restrict_to_relationship_types = ['artist'],
                individual_group_display = 0,
            
                groupings = {
                    label = _("Name"), 
                    type = _("Type"),
                    relationship_types = _("Role")
                },
                group_mode = alphabetical,
                order_by_label_fields = [name_sort],

				indefinite_article = an,
				label_singular = _("Artist"),
				label_plural = _("Artists")
		},
		course_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = authority,		
                table = ca_occurrences,
                relationship_table = ca_objects_x_occurrences,
                restrict_to_types = [],
                restrict_to_relationship_types = [],
                individual_group_display = 0,
            
                groupings = {
                    label = _("Name"), 
                    type = _("Type"),
                    relationship_types = _("Role")
                },
                group_mode = alphabetical,
                order_by_label_fields = [name_sort],

				indefinite_article = an,
				label_singular = _("Course"),
				label_plural = _("Courses")
		},
		collection_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = authority,		
                table = ca_collections,
                relationship_table = ca_objects_x_collections,
                restrict_to_types = [],
                restrict_to_relationship_types = [],
                individual_group_display = 0,
                
                groupings = {
                    label = _("Name"), 
                    type = _("Type"),
                    relationship_types = _("Role")
                },
                group_mode = none,
                
				indefinite_article = an,
				label_singular = _("Collection"),
				label_plural = _("Collections")
		},
		century_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = normalizedDates,
				element_code = ca_objects.dateSet.indexingDate,
				normalization = centuries,
				sort = DESC,
				
				indefinite_article = an,
				label_singular = _("Century"),
				label_plural = _("Centuries")
		},
		decade_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = normalizedDates,
				element_code = ca_objects.dateSet.indexingDate,
				normalization = decades,
				sort = DESC,
				requires = century_facet,
				
				indefinite_article = an,
				label_singular = _("Decade"),
				label_plural = _("Decades")
		},
		year_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = normalizedDates,
				element_code = ca_objects.dateSet.indexingDate,
				normalization = years,
				sort = DESC,
				requires = decade_facet,
				
				indefinite_article = an,
				label_singular = _("Year"),
				label_plural = _("Years")
		},
		work_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = attribute,
				element_code = ca_objects.workTypeSet.worktype,
				group_mode = alphabetical,

				indefinite_article = an,
				label_singular = _("Work Type"),
				label_plural = _("Work Types")
		},
		style_facet = {
				# 'type' can equal authority, attribute, fieldList, normalizedDates
				type = attribute,
				element_code = ca_objects.stylePeriodSet.stylePeriod,
				group_mode = alphabetical,

				indefinite_article = an,
				label_singular = _("Style/Period"),
				label_plural = _("Styles/Periods")
		}
	}
}
