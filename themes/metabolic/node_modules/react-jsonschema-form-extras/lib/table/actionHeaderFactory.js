"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = actionHeadersFrom;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function actionFactory(action, actionConfiguration, schema) {
  var dropDownAction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  if (action === "update") {
    return function (cell, row, enumObject, rowIndex, formData, onChange) {
      var newFormData = formData.slice(0);
      if (rowIndex != undefined) {
        newFormData.map(function (value, index) {
          if (rowIndex === index) {
            var actionToApply = 0; // 0 - update(soft delete), 1 - delete(hard delete)
            var _actionConfiguration$ = actionConfiguration.mandatoryField,
                mandatoryField = _actionConfiguration$ === undefined ? undefined : _actionConfiguration$,
                _actionConfiguration$2 = actionConfiguration.fieldToUpdate,
                fieldToUpdate = _actionConfiguration$2 === undefined ? undefined : _actionConfiguration$2;


            if (mandatoryField !== undefined) {
              mandatoryField.map(function (mandatory) {
                if (value[mandatory] === undefined || value[mandatory] === "") {
                  actionToApply = 1;
                }
              });
            }
            if (actionToApply === 0) {
              // just updating the Column
              if (fieldToUpdate !== undefined) {
                var update = [];
                fieldToUpdate.map(function (fieldToUpdate) {
                  if (schema[fieldToUpdate] !== undefined) {
                    if (schema[fieldToUpdate]["type"] === "boolean") {
                      update[fieldToUpdate] = !value[fieldToUpdate];
                    } // can add separate block for each type of input
                    newFormData[index] = Object.assign({}, value, update);
                  }
                });
              }
            } else if (actionToApply === 1) {
              //Hard delete the row
              newFormData.splice(rowIndex, 1);
              onChange(newFormData);
            }
          }
        });
      }
      onChange(newFormData);
    };
  } else if (action === "delete") {
    return function (cell, row, enumObject, rowIndex, formData, onChange) {
      var newFormData = formData.slice(0);
      newFormData.splice(rowIndex, 1);
      onChange(newFormData);
    };
  } else if (action === "moveup") {
    return function (cell, row, enumObject, rowIndex, formData, onChange) {
      var newFormData = formData.slice(0);
      var temp = newFormData[rowIndex];
      if (rowIndex >= 1) {
        newFormData[rowIndex] = newFormData[rowIndex - 1];
        newFormData[rowIndex - 1] = temp;
        onChange(newFormData);
      }
    };
  } else if (action === "movedown") {
    return function (cell, row, enumObject, rowIndex, formData, onChange) {
      var newFormData = formData.slice(0);
      var temp = newFormData[rowIndex];
      if (rowIndex <= formData.length - 2) {
        newFormData[rowIndex] = newFormData[rowIndex + 1];
        newFormData[rowIndex + 1] = temp;
        onChange(newFormData);
      }
    };
  } else if (action === "dropDownAction") {
    return function (rowIndex, formData, dropDownActionName, onChange) {
      if (dropDownActionName === "delete") {
        var newFormData = formData.slice(0);
        newFormData.splice(rowIndex, 1);
        onChange(newFormData);

        //Windows Object Global Call
        var selectedAction = null;
        if (dropDownAction !== null) {
          selectedAction = dropDownAction.find(function (availableAction) {
            return availableAction.action === dropDownActionName;
          });
        }
        if (selectedAction) {
          var _selectedAction = selectedAction,
              _selectedAction$windo = _selectedAction.windowDeleteAction,
              windowDeleteAction = _selectedAction$windo === undefined ? null : _selectedAction$windo;

          if (windowDeleteAction && window[windowDeleteAction]) {
            window[windowDeleteAction](rowIndex, "delete");
          }
        } else {
          if (window && window.handleCptUpdatePopUp && schema && schema.code) {
            window.handleCptUpdatePopUp(rowIndex, "delete");
          } // to delete the code from diagnosis
        }
      } else {
        // Edit
        if (window && window.handleCptUpdatePopUp) {
          window.handleCptUpdatePopUp(rowIndex, "edit");
        }
      }
    };
  } else if (typeof action === "function") {
    return action;
  } else {
    return undefined;
  }
}

function actionColumnFrom(_ref, schema, forceReRenderTable) {
  var action = _ref.action,
      icon = _ref.icon,
      text = _ref.text,
      dropDownAction = _ref.dropDownAction,
      _ref$actionConfigurat = _ref.actionConfiguration,
      actionConfiguration = _ref$actionConfigurat === undefined ? false : _ref$actionConfigurat;
  var _actionConfiguration$3 = actionConfiguration.filterField,
      filterField = _actionConfiguration$3 === undefined ? false : _actionConfiguration$3,
      _actionConfiguration$4 = actionConfiguration.actionCompletedIcon,
      actionCompletedIcon = _actionConfiguration$4 === undefined ? "" : _actionConfiguration$4;

  var handleClick = actionFactory(action, actionConfiguration, schema, dropDownAction);
  if (!handleClick) {
    return {};
  }
  var hideDropDownAction = true;
  var selectedRow = false;
  var prevSelectedRow = "";

  var handleOutsideClick = function handleOutsideClick(e) {
    /* Forcing the table to render again using forceUpdate for closing actions when clicking outside */
    if (e.target.parentElement.id !== "dropDownAction") {
      forceReRenderTable();
      setTimeout(function () {
        document.removeEventListener("click", handleOutsideClick, false);
      }, 500);
    } else if (e.target.parentElement.id === "dropDownAction" && prevSelectedRow === selectedRow) {
      forceReRenderTable();
      setTimeout(function () {
        document.removeEventListener("click", handleOutsideClick, false);
      }, 500);
    }

    prevSelectedRow = selectedRow;
  };

  var handleDropDownActionClick = function handleDropDownActionClick(rowIndex, formData, onChange, dropDownAction) {
    selectedRow = rowIndex;
    prevSelectedRow = prevSelectedRow === "" ? rowIndex : prevSelectedRow;
    document.addEventListener("click", handleOutsideClick, false);

    var handleDropDownAction = actionFactory(action, actionConfiguration, schema, dropDownAction);
    hideDropDownAction = dropDownActionComponent(rowIndex, formData, handleDropDownAction, dropDownAction, onChange);
  };

  return {
    dataField: icon,
    dataFormat: function dataFormat(cell, row, enumObject, rowIndex, formData, onChange) {
      return _react2.default.createElement(
        "span",
        {
          id: "dropDownAction",
          onClick: function onClick() {
            return action !== "dropDownAction" ? handleClick(cell, row, enumObject, rowIndex, formData, onChange) : handleDropDownActionClick(rowIndex, formData, onChange, dropDownAction);
          }
        },
        action !== "dropDownAction" ? _react2.default.createElement("i", {
          className: row[filterField] || row[filterField] === undefined ? icon : actionCompletedIcon
        }) : _react2.default.createElement("img", { src: "/ehrv8/EncounterV2Template/images/3-dots.png" }),
        text,
        rowIndex === selectedRow && hideDropDownAction
      );
    },
    editable: false
  };
}

var dropDownActionComponent = function dropDownActionComponent(rowIndex, formData, handleActionClick) {
  var actionList = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var onChange = arguments[4];

  var dropDownActionList = actionList.map(function (action) {
    return _react2.default.createElement(
      "li",
      {
        key: action.action,
        onClick: function onClick() {
          return handleActionClick(rowIndex, formData, action.displayName.toLowerCase(), onChange);
        }
      },
      _react2.default.createElement("img", {
        src: action.action === "edit" ? "/ehrv8/EncounterV2Template/images/edit.png" : "/ehrv8/EncounterV2Template/images/delete_blue.png"
      }),
      _react2.default.createElement(
        "span",
        null,
        action.displayName
      )
    );
  });

  return _react2.default.createElement(
    "div",
    null,
    _react2.default.createElement(
      "div",
      { className: "inherit-dropdown" },
      _react2.default.createElement(
        "ul",
        { className: "inherit-dropdown-list" },
        dropDownActionList
      )
    )
  );
};

var actionToCol = function actionToCol(formData, onChange, schema, forceReRenderTable) {
  return function (actionConf) {
    var genericConf = actionColumnFrom(actionConf, schema, forceReRenderTable);
    var realDataFormat = actionConf.dataFormat ? actionConf.dataFormat : genericConf.dataFormat;
    return Object.assign({}, actionConf, genericConf, {
      dataFormat: function dataFormat(cell, row, enumObject, rowIndex) {
        return realDataFormat(cell, row, enumObject, rowIndex, formData, onChange);
      }
    });
  };
};

function actionHeadersFrom(schema, uiSchema, formData, onChange, forceReRenderTable) {
  var _uiSchema$table = uiSchema.table;
  _uiSchema$table = _uiSchema$table === undefined ? {} : _uiSchema$table;
  var _uiSchema$table$right = _uiSchema$table.rightActions,
      rightActions = _uiSchema$table$right === undefined ? [] : _uiSchema$table$right,
      _uiSchema$table$leftA = _uiSchema$table.leftActions,
      leftActions = _uiSchema$table$leftA === undefined ? [] : _uiSchema$table$leftA;
  var _schema$items$propert = schema.items.properties,
      properties = _schema$items$propert === undefined ? [] : _schema$items$propert;


  var rightColumns = rightActions.map(actionToCol(formData, onChange, properties, forceReRenderTable));
  var leftColumns = leftActions.map(actionToCol(formData, onChange, properties, forceReRenderTable));
  return { rightColumns: rightColumns, leftColumns: leftColumns };
}