cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Assets),
		labelSingular = _("asset"),
 		labelPlural = _("assets"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		omitChildRecords = 0,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
			    representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.mediumlarge</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    #caption = "<div class='card-text mb-1'><l><small class='text-muted'>^ca_objects.idno</small></l></div><div class='card-title mb-3'><l>^ca_objects.preferred_labels.name</l></div><div class='card-text'>Description or longer text could go here.  Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor.</div>"
				caption = "<div class='card-title mb-2'><l><if rule='^ca_objects.type_id =~ /Album/'>Album: </if>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef><if rule='^ca_objects.type_id =~ /Album/'><br/><l>^ca_objects.preferred_labels.name</l></if></div>"
			},
			list = {
                representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.large</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    caption = "<div class='card-title mb-2'><l><if rule='^ca_objects.type_id =~ /Album/'>Album: </if>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef><if rule='^ca_objects.type_id =~ /Album/'><br/><l>^ca_objects.preferred_labels.name</l></if></div>"
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_objects.date,
			Entities = ca_entities.surname,
			Identifier = ca_objects.idno,
			Alternate Identifier = ca_objects.altID
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Date = desc,
			Entities = asc,
			Identifier = asc,
			Alternate Identifier = asc
		},
		
		additionalData = {
			date = ca_objects.date,
			description = ca_objects.description,
		}
	},
	activity = {
		displayName = _(Activity),
		labelSingular = _("recently added asset"),
 		labelPlural = _("recently added assets"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		omitChildRecords = 1,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
			    representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.mediumlarge</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    #caption = "<div class='card-text mb-1'><l><small class='text-muted'>^ca_objects.idno</small></l></div><div class='card-title mb-3'><l>^ca_objects.preferred_labels.name</l></div><div class='card-text'>Description or longer text could go here.  Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor.</div>"
				caption = "<div class='card-title mb-2'><l><if rule='^ca_objects.type_id =~ /Album/'>Inquiry: </if>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef><if rule='^ca_objects.type_id =~ /Album/'><br/><l>^ca_objects.preferred_labels.name</l></if></div>"
			},
			list = {
                representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.large</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    caption = "<div class='card-title mb-2'><l><if rule='^ca_objects.type_id =~ /Album/'>Inquiry: </if>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef><if rule='^ca_objects.type_id =~ /Album/'><br/><l>^ca_objects.preferred_labels.name</l></if></div>"
			}
		},
		sortBy = {},
		sortDirection = {},
		
		baseCriteria = {
			project = [agh20]
		},
		
		additionalData = {
			date = ca_objects.date,
			year = ca_objects.date%normalize=years,
			description = ca_objects.description,
		}
	},
	children = {
		displayName = _(Assets),
		labelSingular = _("asset"),
 		labelPlural = _("assets"),
		table = ca_objects,
		
		restrictToTypes = [],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		omitChildRecords = 0,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
			    representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.mediumlarge</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    #caption = "<div class='card-text mb-1'><l><small class='text-muted'>^ca_objects.idno</small></l></div><div class='card-title mb-3'><l>^ca_objects.preferred_labels.name</l></div><div class='card-text'>Description or longer text could go here.  Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor.</div>"
				caption = "<div class='card-title mb-2'><l><if rule='^ca_objects.type_id =~ /Album/'>Album: </if>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef></div>"
			},
			list = {
                representation = "<ifdef code='ca_object_representations.media.large'>^ca_object_representations.media.large</ifdef><ifnotdef code='ca_object_representations.media.large'><div class='bResultItemImgPlaceholder'><ion-icon name='image'></ion-icon></div></div>",
			    caption = "<div class='card-title mb-2'><l>^ca_objects.idno</l><ifdef code='ca_objects.altID'> (^ca_objects.altID)</ifdef></div>"
			}
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_objects.date,
			Entities = ca_entities.surname,
			Identifier = ca_objects.idno,
			Alternate Identifier = ca_objects.altID
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = desc,
			Date = desc,
			Entities = asc,
			Identifier = asc,
			Alternate Identifier = asc
		}
	},
	actions = {
		displayName = _(Actions),
		labelSingular = _("action"),
 		labelPlural = _("actions"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {
				representation = "<unit relativeTo='ca_objects' length='1' restrictToTypes='item_select'>^ca_object_representations.media.medium</unit>",
				caption = "<div class='card-title mb-2'><l>^ca_collections.preferred_labels.name</l></div>",
			}, 
			list = {
				representation = "<unit relativeTo='ca_objects' length='1'>^ca_object_representations.media.medium</unit>",
				caption = "<div class='card-title mb-2'><l>^ca_collections.preferred_labels.name</l></div>",
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		}
	},
	exhibitions = {
		displayName = _(Exhibitions),
		table = ca_occurrences,
		restrictToTypes = [exhibition],
		resultTemplate = ^ca_occurrences.preferred_labels.name,
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				representation = "<unit relativeTo='ca_objects' length='1'>^ca_object_representations.media.widepreview</unit>",
				caption = "<div class='card-title mb-2'><l>^ca_occurrences.preferred_labels.name</l></div><ifdef code='ca_occurrences.date'><div class='card-text mb-1'>^ca_occurrences.date</div></ifdef><ifcount min='1' code='ca_entities' restrictToTypes='org'><div class='card-text'><unit relativeTo='ca_entities' restrictToTypes='org' delimiter=', '>^ca_entities.preferred_labels</unit></div></ifcount>",
			}
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		sortBy = {
			Relevance = _natural,
			Name = ca_occurrence_labels.name
		},
		sortDirection = {
			Relevance = asc,
			Title = asc
		},
		facet_group = exhibitions
	},
	chronology = {
		displayName = _(Chronology),
		labelSingular = _("chronology"),
 		labelPlural = _("chronology"),
		table = ca_occurrences,
		restrictToTypes = [action],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {
				representation = "<unit relativeTo='ca_objects' length='1'>^ca_object_representations.media.widepreview</unit>",
				caption = "<div class='card-title mb-2'><l>^ca_occurrences.preferred_labels.name</l></div>"
			}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_occurrences.idno,
			Name = ca_occurrence_labels.name
		},
		
		additionalData = {
			date = ca_occurrences.date,
			year = ca_occurrences.date%normalize=years,
			description = ca_occurrences.description,
		}
		
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _("People/Orgs"),
		labelSingular = _("person"),
 		labelPlural = _("people"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {}
		},
		sortBy = {
			Relevance = _natural,
			Identifier = ca_entities.idno,
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		}
	}
}

views = {
	images = {
		icon = <ion-icon name="apps"></ion-icon>
	},
	list = {
		icon = <ion-icon name="ios-list-box"></ion-icon>
	},
	timeline = {
		icon = <ion-icon name="ios-time"></ion-icon>
	},
	map = {
		icon = <ion-icon name="globe"></ion-icon>
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class =

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class =

ca_objects = {
	name = _("Objects"),
	facets = {
		
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,
			order_by_label_fields = [name_plural],

			label_singular = _("type"),
			label_plural = _("types")
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			group_mode = none,
			
			multiple=1,
			
			data = {
				image = "<unit relativeTo='ca_objects' start='0' length='1'>^ca_object_representations.media.medium.url</unit>"
			},

			label_singular = _("action"),
			label_plural = _("actions"),
			description = _("Find objects according to the Action they belong to."),
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
#			requires = decade_facet,
			group_mode = none,
			
			multiple=1,
			
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		physical_media = {
			type = attribute,
			element_code = physical_media,
			
			group_mode = none,
			
			multiple=1,
			

			label_singular = _("Physical Media"),
			label_plural = _("Physical Media"),
		},
		processes_and_techniques = {
			type = attribute,
			element_code = processes_and_techniques,
			
			group_mode = none,
			
			multiple=1,
			

			label_singular = _("Processes and techniques"),
			label_plural = _("Processes and techniques"),
		},
		subject_facet = {
			type = attribute,
			element_code = subject,
			
			group_mode = none,
			
			multiple=1,
			

			label_singular = _("Theme"),
			label_plural = _("Themes"),
		},
		bio_regions_facet = {
			type = attribute,
			element_code = bio_regions,
			
			group_mode = none,
			multiple = 1,
			
			label_singular = _("Bio-Region"),
			label_plural = _("Bio-Regions")
		},
#		tag_facet = {
#			type = authority,
#			table = ca_item_tags,
#			relationship_table = ca_items_x_tags,
#			restrict_to_types = [],
			
#			group_mode = none,

#			label_singular = _("tag"),
#			label_plural = _("tags")
#		},	
		exhibition_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [exhibition],
			
			show_all_when_first_facet = 0,
			
			multiple=1,
			
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("exhibition"),
			label_plural = _("exhibitions"),
		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("has media"),
			label_plural = _("has media"),
			description = _("Find objects that have associated media."),
		},
		has_metapoetics_facet = {
			type = has,
			
			table = ca_objects,
			element_code = metapoetics,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			label_yes = _("Has metapoetics"),
			label_no = _("Does not have metapoetics"),
			
			single_value = 1,
			
			label_singular = _("has metapoetics"),
			label_plural = _("has metapoetics"),
			description = _("Find objects that have metapoetics."),
		},
		action_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 0,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [action],
			
			show_all_when_first_facet = 0,
			
			multiple=1,
			
			requires = x,
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("exhibition"),
			label_plural = _("exhibitions"),
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			requires=x,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("person"),
			label_plural = _("people"),
		}
	}
}
ca_occurrences = {
	name = _("Events/Exhibitons/Lectures/Presentations"),
	facets = {
		project = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_occurrences_x_collections,
			restrict_to_types = [],
			
			group_mode = none,
			
			multiple=1,
			
			data = {
				image = "<unit relativeTo='ca_objects' start='0' length='1'>^ca_object_representations.media.medium.url</unit>"
			},

			label_singular = _("project"),
			label_plural = _("projects")
		},
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
#			requires = decade_facet,
			group_mode = none,
			
			multiple=1,
			
			
			label_singular = _("year"),
			label_plural = _("years")		
		},
		venue_facet = {
			type = authority,
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [org],
			
			group_mode = none,
			
			multiple=1,
			facet_group = [exhibitions],

			label_singular = _("venues"),
			label_plural = _("venues")
		}
	}
}
ca_collections = {
	name = _("Actions"),
	facets = {
		year_facet = {
			type = normalizedDates,
			element_code = date,
			normalization = years,
#			requires = decade_facet,
			group_mode = none,
			
			multiple=1,
			
			
			label_singular = _("year"),
			label_plural = _("years")		
		}
	}
}
