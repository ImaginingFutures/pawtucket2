cache_timeout = 0

#
# 
#
landing = {
	objects = {
		facet = type_facet,
		list_code = object,
		table = objects,
		image = /browse/objects.jpg,
		color = 00abe6,
		label = _("Objects"),
		description = _("Explore paintings, sculptures, Girl Scout merchandise, uniforms and more!"),		
	},
	paper = {
		facet = type_facet,
		list_code = archival,
		table = objects,
		image = /browse/documents.jpg,
		color = 00ae58,
		label = _("Documents & Photographs"),
		description = _("Find Juliette Gordon Low correspondence, glass plate negatives, and vintage photos."),		
	},
	publications = {
		facet = type_facet,
		list_code = publication,
		table = objects,
		image = /browse/publications.jpg,
		color = 004e9a,
		label = _("Publications"),
		description = _("Read through the American Girl magazine and original Girl Scout handbooks."),
	},
	audio = {
		facet = type_facet,
		list_code = time,
		table = objects,
		image = /browse/audio.jpg,
		color = faa61a,
		label = _("Audio/Visual"),
		description = _("Enjoy classic Girl Scout commercials, silent films, and other media."),		
	},	
	people = {
		facet = ,
		list_code = ,
		table = entities,
		image = /browse/people.jpg,
		color = 6e298d,
		label = _("People"),
		description = _("Discover how familiar faces like Lou Henry Hoover, Michelle Obama, and Debbie Reynolds connect to Girl Scouting."),		
	},
	places = {
		facet = ,
		list_code = ,
		table = places,
		image = /browse/places.jpg,
		color = ec008b,
		label = _("Places"),
		description = _("Travel to international and historic sites connected to Girl Scouts."),		
	},
	events = {
		facet = ,
		list_code = ,
		table = occurrences,
		image = /browse/events.jpg,
		color = ee3124,
		label = _("Events"),
		description = _("Journey through time to encampments, White House visits, and Girl Scout Conventions."),		
	},				
}
# --- explore topics on bottom of browse landing page
# --- for facets enter facet and id or for list item/ subject browses enter facet and list_code of list_item
# --- for searches, enter search
topics = {
	cookies = {
		facet =,
		list_code =,
		table = objects,
		id =,
		search_term = cookies,
		image = /browse/cookies.jpg,
		color = ec008b,
		label = _("Cookies"),
		description = _("Learn about iconic Girl Scout Cookie history!"),
	},
	badges = {
		facet = general_collection_facet,
		list_code =,
		table = objects,
		id = 5611,
		image = /browse/badge2.jpg,
		color = 004e9a,
		label = _("Badges"),
		description = _("Browse through original and modern day Girl Scout badges. "),
	},
	camping = {
		facet = general_collection_facet,
		list_code =,
		table = objects,
		id = 4529,
		image = /browse/camping.jpg,
		color = 00abe6,
		label = _("Outdoors & Camping"),
		description = _("Discover Girl Scout camping equipment and photos."),
	},
	civic = {
		facet = general_collection_facet,
		list_code =,
		table = objects,
		id = 4792,
		image = /browse/civic.jpg,
		color = 00ae58,
		label = _("Civic Engagement"),
		description = _("Explore key moments in Girl Scout activism and service. "),
	},
	stem = {
		facet =,
		list_code =,
		table = objects,
		id =,
		search_term = science OR math OR STEM OR NASA,
		image = /browse/stem.jpg,
		color = 6e298d,
		label = _("STEM"),
		description = _("Learn how Girl Scouts have been improving the world through STEM for over 100 years!"),
	},
	birthplace = {
		facet = storage_location_facet,
		list_code =,
		table = objects,
		id =572,
		search_term = ,
		image = /browse/birthplace.jpg,
		color = faa61a,
		label = _("Juliette Gordon Low Birthplace"),
		description = _("Discover collections located at the birthplace of Girl Scout Founder Juliette Gordon Low."),
	},
}

browseTypes = {
	objects = {
		displayName = _(Objects),
		labelSingular = _("Object"),
 		labelPlural = _("Objects"),
		table = ca_objects,
		
		restrictToTypes = [archival, object, publication, retention, time],
		dontExpandTypesHierarchically = true,
		availableFacets = [entity_facet, place_facet, collection_facet, decade_facet, year_facet, term_facet, has_media_facet],
		facetGroup = objects,
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
			list = {},
			map = {
				data = ca_objects.georeference,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					icon = <div style='float:left; margin:0px 10px 10px 0px;'>^ca_object_representations.media.icon</div>	
				}
			},
			timeline = {
				data = ca_objects.overall_date,
				display = {
					title_template = <l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno),
					description_template = <p>^ca_objects.description</p>,
					image = ^ca_object_representations.media.small,
					icon = ^ca_object_representations.media.icon
				}
			}			
		},
		sortBy = {
			Identifier = ca_objects.idno,
			Title = ca_object_labels.name
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Title = desc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _("People and Organizations"),
		labelSingular = _("Person"),
 		labelPlural = _("People and Organizations"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {		
			Name = ca_entity_labels.surname;ca_entity_labels.forename,

		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Identifier = asc,
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [featured]
		},
	},
	places = {
		displayName = _("Places"),
		labelSingular = _("Place"),
 		labelPlural = _("Places"),
		table = ca_places,
		restrictToTypes = [],
		showLetterBarFrom = ca_place_labels.name,
		showLetterBarSorts = [ca_place_labels.name_sort],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			map = {
				data = ca_places.georeference,
				width = 100%,
				height = 600px,
				minZoomLevel = 2,
				maxZoomLevel = 15,
				display = {
					title_template = <l>^ca_places.preferred_labels.name</l>,
					description_template = <p>^ca_places.description</p>,
					icon = <div style='float:left; margin:0px 10px 10px 0px;'><unit relativeTo='ca_objects.related' length='1' restrictToRelationshipTypes='featured'>^ca_object_representations.media.icon</unit></div>	
				}
			},
			list = {}
		},
		
		sortBy = {
			Name = ca_place_labels.name,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [featured]
		},
	},
	occurrences = {
		displayName = _("Events and Exhibitions"),
		labelSingular = _("Event/Exhibiton"),
 		labelPlural = _("Events/Exhibitons"),
		table = ca_occurrences,
		restrictToTypes = [],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name_sort],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Name = ca_occurrence_labels.name,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Name = asc
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown,
		options = {
			selectMediaUsingRelationshipTypes = [featured]
		},
	}		
}
ca_objects = {
	name = _("Objects"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = none,

			label_singular = _("Object type"),
			label_plural = _("Object types"),
			description = _("Find objects according to the Types defined in your collection profile."),
		},	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			facet_groups = [objects],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People"),
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_objects_x_places,
			restrict_to_types = [],
			facet_groups = [objects],
			
			individual_group_display = 1,
			
			group_mode = hierarchical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("Place"),
			label_plural = _("Places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		},
		event_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			facet_groups = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("Event"),
			label_plural = _("Events"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		},		
		decade_facet = {
			type = normalizedDates,
			element_code = overall_date,
			normalization = decades,
			facet_groups = [objects],
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = overall_date,
			normalization = years,
			facet_groups = [objects],
			
			group_mode = none,
			
			requires = decade_facet,
			
			label_singular = _("Year"),
			label_plural = _("Years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		term_facet = {
			type = authority,
			table = ca_list_items,
			relationship_table = ca_objects_x_vocabulary_terms,
			restrict_to_types = [],
			facet_groups = [objects],
			
			individual_group_display = 0,
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _("Local Subject"),
			label_plural = _("Local Subjects"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},
		lcsh_facet = {
			type = attribute,
			element_code = lcsh_terms,

			facet_groups = [objects],
			
			group_mode = alphabetical,
			order_by_label_fields = [name_singular],
			
			label_singular = _("LCSH Subject"),
			label_plural = _("LCSH Subjects"),
			description = _("Browse keywords and vocabulary terms you have associated with your records.  You can displays your keywords as a list or hierarchy of terms.")
		},			
		#lcsh_facet = {
		#	type = attribute,
		#	element_code = lcsh_terms,
		#	
		#	group_mode = alphabetical,
#
#			label_singular = _("subject"),
#			label_plural = _("subjects")
#		},
		has_media_facet = {
			type = has,
			
			table = ca_object_representations,
			relationship_table = ca_objects_x_object_representations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			facet_groups = [objects],
			
			label_yes = _("Has media"),
			label_no = _("Does not have media"),
			
			single_value = 1,
			
			label_singular = _("Media available"),
			label_plural = _("Media available"),
			description = _("Find objects that have associated media."),
		},
		# --- this is only used by the browse landing page canned browses
		general_collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			requires= xxx,
			
			label_singular = _("Research Collection"),
			label_plural = _("Research Collections")
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [collection],
			facet_groups = [objects],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			#hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			#remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			#hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			#hierarchy_order  = DESC,
			
			label_singular = _("Research Collection"),
			label_plural = _("Research Collections"),
			description = _("Find objects according to the Collections they belong to."),
		},	
		record_group_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [record_group],
			facet_groups = [objects],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			requires = collection_facet,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			#hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			#remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			#hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			#hierarchy_order  = DESC,
			
			label_singular = _("Research Collection"),
			label_plural = _("Research Collections"),
			description = _("Find objects according to the Collections they belong to."),
		},	
		series_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_objects_x_collections,
			restrict_to_types = [series],
			facet_groups = [objects],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			requires = record_group_facet,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			#hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			#remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			#hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			#hierarchy_order  = DESC,
			
			label_singular = _("Research Collection"),
			label_plural = _("Research Collections"),
			description = _("Find objects according to the Collections they belong to."),
		},
		storage_location_facet = {
			type = authority,
			table = ca_storage_locations,
			relationship_table = ca_objects_x_storage_locations,
			restrict_to_types = [],
			restrict_to_relationship_types = [],
			
			group_mode = hierarchical,
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 1,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display
			hierarchy_limit = 3,
			
			# can be ASC or DESC
			hierarchy_order  = DESC,
			
			requires = xxx,
			
			label_singular = _("location"),
			label_plural = _("locations")
		}		
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("Type"),
			label_plural = _("Types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = active_dates,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Active date"),
			label_plural = _("Active dates"),
			description = _("Find entities according to their active dates."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = active_dates,
			normalization = years,
			
			group_mode = none,
			
			requires = decade_facet,
			
			label_singular = _("Active date"),
			label_plural = _("Active dates"),
			description = _("Find entities according to their active dates."),			
		},
		roles_facet = {
			type = attribute,
			element_code = entity_roles,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("Role"),
			label_plural = _("Roles")
		},
		collection_facet = {
			type = authority,
			table = ca_collections,
			relationship_table = ca_entities_x_collections,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			label_singular = _("Collection"),
			label_plural = _("Collections")
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			facet_groups = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("Place"),
			label_plural = _("Places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		},
		event_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_occurrences,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			facet_groups = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("Event"),
			label_plural = _("Events"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		},				
	}
}
ca_places = {
	name = _("Places"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People")
		},
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_places_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			indefinite_article = an,
			label_singular = _("Occurrence"),
			label_plural = _("Occurrences")
		},
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("Type"),
			label_plural = _("Types")
		}
	}
}

ca_occurrences = {
	name = _("Other authorities"),
	facets = {
		type_facet = {
			type = fieldList,
			field = type_id,
			
			group_mode = alphabetical,
			
			label_singular = _("Type"),
			label_plural = _("Types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = event_dates,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("Decade"),
			label_plural = _("Decades")			
		},
		year_facet = {
			type = normalizedDates,
			element_code = event_dates,
			normalization = years,
			
			group_mode = none,
			
			requires = decade_facet,
			
			label_singular = _("Year"),
			label_plural = _("Years"),		
		},
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("Person"),
			label_plural = _("People")
		},
		place_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_places,
			relationship_table = ca_entities_x_places,
			restrict_to_types = [],
			facet_groups = [],
			
			individual_group_display = 1,
			
			group_mode = alphabetical,
			order_by_label_fields = [name],
			
			# Set to non-zero value to display hierarchy on items in this facet
			show_hierarchy = 0,
			
			# Character(s) to place between elements of the hierarchy
			hierarchical_delimiter = &nbsp;â¬…&nbsp;,
			
			# Number of items to trim off the top (leave blank or set to 0 to trim nothing)
			remove_first_items = 0,
			
			# Maximum length of hierarchy to display (leave blank to return hierarchy unabridged)
			hierarchy_limit = 3,
			
			# can be ASC or DESC (default is DESC)
			hierarchy_order  = DESC,
			
			indefinite_article = a,
			label_singular = _("Place"),
			label_plural = _("Places"),
			description = _("Find objects according to the place relationships in your collection.  You can choose to view the available places as a list or heirarchy of place names.")
		}
	}
}


views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat = list

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3